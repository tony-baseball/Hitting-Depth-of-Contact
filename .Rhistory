taskscheduler_delete("copy_XRD_to_Plex")
#install.packages('dplyr')
library(taskscheduleR)
taskscheduler_delete("copy_XRD_to_Plex")
#     Copy from X:/ to D:/
taskscheduler_create(taskname = "copy_XRD_to_Plex", rscript = "C:/Users/tdmed/OneDrive/R_Codes/Plex Debrid Automation.R",
schedule="DAILY", startdate = format(as.Date("2023-01-05"), "%m/%d/%Y"), starttime = "01:22")
{as.data.frame(tasks<-taskscheduler_ls())
tasks <- tasks %>%
filter(grepl("Rscript.exe",`Task To Run`)) %>%
select(TaskName, `Last Run Time`, `Next Run Time`, `Repeat: Every`, `Schedule Type`, `Scheduled Task State` , `Power Management`)
}
library(dplyr)
{as.data.frame(tasks<-taskscheduler_ls())
tasks <- tasks %>%
filter(grepl("Rscript.exe",`Task To Run`)) %>%
select(TaskName, `Last Run Time`, `Next Run Time`, `Repeat: Every`, `Schedule Type`, `Scheduled Task State` , `Power Management`)
}
View(tasks)
library(ggplot2)
library(plyr)
library(tidyverse)
setwd("C:/Users/tdmed/OneDrive/_Github/Hitting-Depth-of-Contact")
df <- read.csv('sample.csv') %>%
filter(PitchCall == 'InPlay',
HitType != 'Bunt')
df <- read.csv('sample csv.csv') %>%
filter(PitchCall == 'InPlay',
HitType != 'Bunt')
ggplot(df, aes(-yt_HitLocationX * 12, yt_HitLocationY * 12, PitchNo, ExitSpeed, Angle, Bearing))+
scale_x_continuous(limit= c(-10,10), breaks=seq(-10,10 ,1))+
scale_y_continuous(limit= c(-3,51), breaks=seq(0,51 ,3)) +
geom_point(aes(color = ExitSpeed) ,size = 6, alpha = .9)+
scale_color_gradient2(midpoint=86, low="cornflowerblue", mid="white",high="darkred")+
# scale_color_gradient(low="lightblue",high="darkred")+
geom_text(aes(label = PitchNo),size =3, check_overlap = TRUE, colour = 'black')+
# home plate outline
geom_segment(aes(x = -8.5, y = 8.5, xend = -8.5, yend = 17), size = 1, alpha = 1)+ # left side
geom_segment(aes(x = 8.5, y = 8.5, xend = 8.5, yend = 17), size = 1, alpha = 1)+ # right side
geom_segment(aes(x = -8.5, y = 17, xend = 8.5, yend = 17), size = 1, alpha = 1)+ # front plate
geom_segment(aes(x = -8.5, y = 8.5, xend = 0, yend = 0), size = 1, alpha = 1)+
geom_segment(aes(x = 8.5, y = 8.5, xend = 0, yend = 0), size = 1, alpha = 1)+
geom_hline(yintercept=-3:51 *6, linetype="dashed", color = "red", size = 1, alpha = .3)+
theme_bw()+
theme(legend.position="right",
legend.text = element_text(size = 8),
aspect.ratio=2/1,
# panel.background = element_rect(fill = "lightgrey",
#                                 colour = "lightblue",
#                                 size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(title = paste(#df$Batter[1],
"\nDepth of Contact"),
subtitle = "Overhead View",
x = "Horizontal Contact Point",
y = "Contact Depth",
color = paste("ExitVelo Scale\nAvg = ", round((mean(df$ExitSpeed,na.rm=TRUE)),1)))
df %>% select (PlateLocSide, yt_HitLocationX)
ggplot(df, aes(-PlateLocSide * 12, yt_HitLocationY * 12, PitchNo, ExitSpeed, Angle, Bearing))+
#ggplot(df, aes(yt_HitLocationX * 12, yt_HitLocationY * 12, PitchNo, ExitSpeed, Angle, Bearing))+
scale_x_continuous(limit= c(-10,10), breaks=seq(-10,10 ,1))+
scale_y_continuous(limit= c(-3,51), breaks=seq(0,51 ,3)) +
geom_point(aes(color = ExitSpeed) ,size = 6, alpha = .9)+
scale_color_gradient2(midpoint=86, low="cornflowerblue", mid="white",high="darkred")+
# scale_color_gradient(low="lightblue",high="darkred")+
geom_text(aes(label = PitchNo),size =3, check_overlap = TRUE, colour = 'black')+
# home plate outline
geom_segment(aes(x = -8.5, y = 8.5, xend = -8.5, yend = 17), size = 1, alpha = 1)+ # left side
geom_segment(aes(x = 8.5, y = 8.5, xend = 8.5, yend = 17), size = 1, alpha = 1)+ # right side
geom_segment(aes(x = -8.5, y = 17, xend = 8.5, yend = 17), size = 1, alpha = 1)+ # front plate
geom_segment(aes(x = -8.5, y = 8.5, xend = 0, yend = 0), size = 1, alpha = 1)+
geom_segment(aes(x = 8.5, y = 8.5, xend = 0, yend = 0), size = 1, alpha = 1)+
geom_hline(yintercept=-3:51 *6, linetype="dashed", color = "red", size = 1, alpha = .3)+
theme_bw()+
theme(legend.position="right",
legend.text = element_text(size = 8),
aspect.ratio=2/1,
# panel.background = element_rect(fill = "lightgrey",
#                                 colour = "lightblue",
#                                 size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(title = paste(#df$Batter[1],
"\nDepth of Contact"),
subtitle = "Overhead View",
x = "Horizontal Contact Point",
y = "Contact Depth",
color = paste("ExitVelo Scale\nAvg = ", round((mean(df$ExitSpeed,na.rm=TRUE)),1)))
#ggplot(df, aes(-PlateLocSide * 12, yt_HitLocationY * 12, PitchNo, ExitSpeed, Angle, Bearing))+
ggplot(df, aes(yt_HitLocationX * 12, yt_HitLocationY * 12, PitchNo, ExitSpeed, Angle, Bearing))+
scale_x_continuous(limit= c(-10,10), breaks=seq(-10,10 ,1))+
scale_y_continuous(limit= c(-3,51), breaks=seq(0,51 ,3)) +
geom_point(aes(color = ExitSpeed) ,size = 6, alpha = .9)+
scale_color_gradient2(midpoint=86, low="cornflowerblue", mid="white",high="darkred")+
# scale_color_gradient(low="lightblue",high="darkred")+
geom_text(aes(label = PitchNo),size =3, check_overlap = TRUE, colour = 'black')+
# home plate outline
geom_segment(aes(x = -8.5, y = 8.5, xend = -8.5, yend = 17), size = 1, alpha = 1)+ # left side
geom_segment(aes(x = 8.5, y = 8.5, xend = 8.5, yend = 17), size = 1, alpha = 1)+ # right side
geom_segment(aes(x = -8.5, y = 17, xend = 8.5, yend = 17), size = 1, alpha = 1)+ # front plate
geom_segment(aes(x = -8.5, y = 8.5, xend = 0, yend = 0), size = 1, alpha = 1)+
geom_segment(aes(x = 8.5, y = 8.5, xend = 0, yend = 0), size = 1, alpha = 1)+
geom_hline(yintercept=-3:51 *6, linetype="dashed", color = "red", size = 1, alpha = .3)+
theme_bw()+
theme(legend.position="right",
legend.text = element_text(size = 8),
aspect.ratio=2/1,
# panel.background = element_rect(fill = "lightgrey",
#                                 colour = "lightblue",
#                                 size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(title = paste(#df$Batter[1],
"\nDepth of Contact"),
subtitle = "Overhead View",
x = "Horizontal Contact Point",
y = "Contact Depth",
color = paste("ExitVelo Scale\nAvg = ", round((mean(df$ExitSpeed,na.rm=TRUE)),1)))
#plot_ly(df, x = ~-PlateLocSide * 12, y = ~yt_HitLocationY * 12 , z = ~yt_HitLocationZ * 12, color = ~ExitSpeed) %>%
plot_ly(df, x = ~yt_HitLocationX * 12, y = ~yt_HitLocationY * 12 , z = ~yt_HitLocationZ * 12, color = ~ExitSpeed) %>%
add_markers() %>%
layout(scene = list(xaxis = list(range = c(-20,20) , title = 'Horz Contact Point'),
yaxis = list(range = c(-3,42), title = 'Depth of Contact'),
zaxis = list(range = c(0,60), title = 'Height of Pitch')) )
library(plotly)
#plot_ly(df, x = ~-PlateLocSide * 12, y = ~yt_HitLocationY * 12 , z = ~yt_HitLocationZ * 12, color = ~ExitSpeed) %>%
plot_ly(df, x = ~yt_HitLocationX * 12, y = ~yt_HitLocationY * 12 , z = ~yt_HitLocationZ * 12, color = ~ExitSpeed) %>%
add_markers() %>%
layout(scene = list(xaxis = list(range = c(-20,20) , title = 'Horz Contact Point'),
yaxis = list(range = c(-3,42), title = 'Depth of Contact'),
zaxis = list(range = c(0,60), title = 'Height of Pitch')) )
yakker <- read.csv("C:/Users/tdmed/OneDrive/_Shiny/Coop2/yakker23.csv")
yak <- yakker %>% filter(max(Date))
yak <- yakker %>% filter(Date = max(Date))
yak <- yakker %>% filter(Date == max(Date))
write.csv(yak, 'C:/Users/tdmed/OneDrive/_Github/Generate-Home-Run-Plots/homeruns.csv', row.names = FALSE, na='')
